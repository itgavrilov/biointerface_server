plugins {
    id 'java'
    id 'application'
}

def junitVersion = '5.8.1'
def slf4jVersion = '1.7.32'
def log4jVersion = '2.14.1'
def hibernateVersion = '5.6.0.Final'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    group = 'ru.gsa.biointerface'
    mainClassName = 'ru.gsa.biointerface.Main'
    version = '1.0-SNAPSHOT'
}

repositories {
    mavenCentral()
}

dependencies {
//-----------SerialPort----------------------
    implementation("com.fazecast:jSerialComm:2.7.0")

//-----------Logging------------
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-slf4j18-impl:${log4jVersion}")

//-----------Database----------------------
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("com.github.gwenn:sqlite-dialect:0.1.2")
    implementation("org.xerial:sqlite-jdbc:3.36.0.3")

// Annotation processor for metamodel for criteria api
    //annotationProcessor("javax.xml.bind:jaxb-api")
    //annotationProcessor("org.hibernate:hibernate-jpamodelgen:${hibernateVersion}")
//-----------Validator----------------------
    implementation('org.hibernate:hibernate-validator:7.0.1.Final')
    implementation("javax.validation:validation-api:2.0.1.Final")

//-----------Validator for javafx------------
    //implementation 'org.openjfx:javafx:16' // https://mvnrepository.com/artifact/org.openjfx/javafx
    compileClasspath('net.synedra:validatorfx:0.1.13') {
        exclude(group: 'org.openjfx')
    }

//-----------Tests----------------------
    testImplementation("org.hibernate:hibernate-core:${hibernateVersion}")
    testImplementation("com.h2database:h2:1.4.200")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}